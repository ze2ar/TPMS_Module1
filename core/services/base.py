import math


def permutations(n: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

    üìù –§–æ—Ä–º—É–ª–∞: P(n) = n!
    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
    """
    if n < 0:
        return 0
    return math.perm(n)


def arrangements(n: int, k: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∏–∑ n –ø–æ k.

    üìù –§–æ—Ä–º—É–ª–∞: A(n, k) = n! / (n - k)!
    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :param k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
    """
    if k > n or n < 0 or k < 0:
        return 0
    return math.perm(n, k)


def combinations(n: int, k: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ n –ø–æ k.

    üìù –§–æ—Ä–º—É–ª–∞: C(n, k) = n! / (k! * (n - k)!)
    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :param k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π
    """
    if k > n or n < 0 or k < 0:
        return 0
    return math.comb(n, k)


def combinations_with_repetition(n: int, k: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏.

    üìù –§–æ—Ä–º—É–ª–∞: C(n + k - 1, k) = (n + k - 1)! / (k! * (n - 1)!)
    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :param k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
    """
    if n < 0 or k <= 0:
        return 0
    return math.comb(k + n - 1, n)
