import math


def poisson_formula(n: int, p: float, m: int) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ü—É–∞—Å—Å–æ–Ω–∞.

    üìù –§–æ—Ä–º—É–ª–∞: P(m) = (a^m / m!) * e^(-a), –≥–¥–µ a = n * p

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏
    :param m: –ß–∏—Å–ª–æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
    :return: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è m —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ a = n * p
    """
    a = round(n * p, 2)
    return (a**m) / math.factorial(m) * math.exp(-a)


def local_moivre_laplace(n: int, p: float, x_target: int) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º–µ –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.

    üìù –§–æ—Ä–º—É–ª–∞: P(m) ‚âà (1 / œÉ) * œÜ(x_m), œÜ(x) = (1 / ‚àö(2œÄ)) * e^(-x¬≤ / 2)

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏
    :param x_target: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    :return: –ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ x_target
    """
    mu = n * p
    sigma = math.sqrt(n * p * (1 - p))

    x_m = (x_target - mu) / sigma
    phi = (1 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * x_m**2)

    return (1 / sigma) * phi


def integral_moivre_laplace(n: int, p: float, a: int, b: int) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º–µ –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞.

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤)
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±–æ—è –≤—ã–∑–æ–≤–∞)
    :param a: –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
    :param b: –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
    :return: –ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤ –æ–∫–∞–∂–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b]
    """

    def laplace(x):
        """–§—É–Ω–∫—Ü–∏—è –õ–∞–ø–ª–∞—Å–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –æ—à–∏–±–æ–∫"""
        return 0.5 * (1 + math.erf(x / math.sqrt(2)))

    mu = n * p
    sigma = math.sqrt(n * p * (1 - p))

    x_a = (a - mu) / sigma
    x_b = (b - mu) / sigma

    return laplace(x_b) - laplace(x_a)


# TODO –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
# TODO –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã


def poisson_formatter(n: int, p: float, m: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ü—É–∞—Å—Å–æ–Ω–∞

    üìù –§–æ—Ä–º–∞—Ç: <a>^<m>/<m>!e^-<a>

    –ü—Ä–∏–º–µ—Ä: 2,57^2/2!e^-2,57

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏
    :param m: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
    :return: –§–æ—Ä–º—É–ª–∞ –ü—É–∞—Å—Å–æ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    a = n * p

    a_str = f"{a:.2f}".replace(".", ",")
    m_str = str(m)

    result = f"{a_str}^{m_str}/{m_str}!e^-{a_str}"
    return result


def local_moivre_laplace_formatter(n: int, p: float, x_target: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º–µ –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–æ–π 20 —Å–∏–º–≤–æ–ª–æ–≤.

    üìù –§–æ—Ä–º–∞—Ç: 1/<œÉ>fi(<|x_m|>)
    –ü—Ä–∏–º–µ—Ä: 1/2,57fi(3,48)

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏
    :param x_target: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤
    :return: –§–æ—Ä–º—É–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    mu = n * p
    sigma = math.sqrt(n * p * (1 - p))
    x_m = (x_target - mu) / sigma

    sigma_str = f"{sigma:.2f}".replace(".", ",")
    x_m_abs_str = f"{abs(x_m):.2f}".replace(".", ",")

    result = f"1/{sigma_str}fi({x_m_abs_str})"
    return result


def integral_moivre_laplace_formatter(n: int, p: float, x1: int, x2: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º–µ –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.

    üìù –§–æ—Ä–º–∞—Ç: –§_0(<|a|>)¬±–§_0(<|b|>)\\\\
    –ï—Å–ª–∏ a –∏ b –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:
    - –æ–±–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: –§_0(a) - –§_0(b)
    - –æ–±–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: -–§_0(|a|) + –§_0(|b|)

    –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
    –§_0(3,48)+–§_0(3,48)
    -–§_0(3,9)+–§_0(4)

    :param n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    :param p: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –≤ –æ–¥–Ω–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏
    :param x1: –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤
    :param x2: –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤
    :return: –§–æ—Ä–º—É–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã –ú—É–∞–≤—Ä–∞-–õ–∞–ø–ª–∞—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """

    mu = n * p
    sigma = math.sqrt(n * p * (1 - p))
    a = (x1 - mu) / sigma
    b = (x2 - mu) / sigma

    def format_number(x: float) -> str:
        num_str = f"{abs(x):.2f}".replace(".", ",")
        num_str = num_str.rstrip(",00").rstrip(",0")
        return num_str

    a_str = format_number(a)
    b_str = format_number(b)

    if a < 0 and b < 0:
        result = f"-–§_0({b_str})+–§_0({a_str})"
    else:
        result = f"–§_0({b_str})+–§_0({a_str})"

    return result
