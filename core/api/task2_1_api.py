from fastapi import APIRouter

from core.services import hypergeometric_probability, exam_pass_probability
from core.models import ExamProbabilityRequest, HypergeometricRequest

router = APIRouter(prefix="/task2_1", tags=["Task2_1"])


@router.post(
    "/exam-pass-probability",
    response_model=float,
    summary="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω",
    description="""
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –ø–æ –≥–∏–ø–µ—Ä–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.
    
    üìù –§–æ—Ä–º—É–ª–∞: P(X = k) = (C(m, k) * C(N - m, n - k)) / C(N, n)
    - **N** ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
    - **K** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç.
    - **n** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤.
    - **k** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
    
    üìö –ü—Ä–∏–º–µ—Ä: —Å—Ç—É–¥–µ–Ω—Ç –∑–Ω–∞–µ—Ç 25 –∏–∑ 60 –≤–æ–ø—Ä–æ—Å–æ–≤. –í –±–∏–ª–µ—Ç–µ 3 –≤–æ–ø—Ä–æ—Å–∞, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 2.
    """,
    response_description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω (–æ—Ç 0 –¥–æ 1).",
)
def api_exam_pass_probability(request: ExamProbabilityRequest):
    return exam_pass_probability(
        total_questions=request.total_questions,
        known_questions=request.known_questions,
        questions_in_ticket=request.questions_in_ticket,
        min_correct_answers=request.min_correct_answers,
    )


@router.post(
    "/hypergeometric",
    response_model=float,
    summary="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–∏–ø–µ—Ä–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
    description="""
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–∏–ø–µ—Ä–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
    
    üìù –§–æ—Ä–º—É–ª–∞: P(X = k) = (C(m, k) * C(N - m, n - k)) / C(N, n)
    - **N** ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ–≥–æ —à–∞—Ä–æ–≤).
    - **K** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–ª—ã—Ö —à–∞—Ä–æ–≤).
    - **n** ‚Äî —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–µ–º —à–∞—Ä–æ–≤).
    - **k** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º –≤ –≤—ã–±–æ—Ä–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ–ª—å–∫–æ –±–µ–ª—ã—Ö —à–∞—Ä–æ–≤ –¥–æ—Å—Ç–∞–ª–∏).

    #### –ü—Ä–∏–º–µ—Ä:
    –í —É—Ä–Ω–µ 30 —à–∞—Ä–æ–≤, –∏–∑ –Ω–∏—Ö 15 –±–µ–ª—ã—Ö –∏ 15 —á–µ—Ä–Ω—ã—Ö. –ò–∑–≤–ª–µ–∫–∞–µ–º 14 —à–∞—Ä–æ–≤.
    –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –æ–∫–∞–∂–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 5 –±–µ–ª—ã—Ö?
    """,
    response_description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (–æ—Ç 0 –¥–æ 1)",
)
def api_hypergeometric_probability(request: HypergeometricRequest):
    result = hypergeometric_probability(
        total_population=request.total_population,
        success_population=request.success_population,
        sample_size=request.sample_size,
        successes_in_sample=request.successes_in_sample,
    )
    return round(result, 3)
