from fastapi import APIRouter

from core.models import *
from core.services import *

router = APIRouter(prefix="/base", tags=["Base"])


@router.post(
    "/permutations",
    summary="–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ n",
    description="–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ n.",
    response_description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫",
    response_model=int,
)
def api_permutations(request: PermutationsRequest):
    """
    –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

    üìù –§–æ—Ä–º—É–ª–∞: P(n) = n!
    –ì–¥–µ:
    - **n**: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    return permutations(n=request.n)


@router.post(
    "/arrangements",
    summary="–†–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ n –ø–æ k",
    description="–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∏–∑ n –ø–æ k —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
    response_description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π",
    response_model=int,
)
def api_arrangements(request: ArrangementsRequest):
    """
    –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∏–∑ n –ø–æ k.

    üìù –§–æ—Ä–º—É–ª–∞: A(n, k) = n! / (n - k)!
    - **n**: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - **k**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    return arrangements(n=request.n, k=request.k)


@router.post(
    "/combinations",
    summary="–°–æ—á–µ—Ç–∞–Ω–∏—è –∏–∑ n –ø–æ k",
    description="–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ n –ø–æ k —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
    response_description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π",
    response_model=int,
)
def api_combinations(request: CombinationsRequest):
    """
    –ü–æ–¥—Å—á–µ—Ç —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ n –ø–æ k.

    üìù –§–æ—Ä–º—É–ª–∞: C(n, k) = n! / (k! * (n - k)!)
    –ì–¥–µ:
    - **n**: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - **k**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    return combinations(n=request.n, k=request.k)


@router.post(
    "/combinations-with-repetition",
    summary="–°–æ—á–µ—Ç–∞–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏",
    description="–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –∏–∑ n —Å–æ—Ä—Ç–æ–≤ –ø–æ k —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
    response_description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏",
    response_model=int,
)
def api_combinations_with_repetition(request: CombinationsWithRepetitionRequest):
    """
    –ü–æ–¥—Å—á–µ—Ç —Å–æ—á–µ—Ç–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –∏–∑ n —Å–æ—Ä—Ç–æ–≤ –ø–æ k.

    üìù –§–æ—Ä–º—É–ª–∞: C(n + k - 1, k) = (n + k - 1)! / (k! * (n - 1)!)
    –ì–¥–µ:
    - **n**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤
    - **k**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    return combinations_with_repetition(n=request.n, k=request.k)
